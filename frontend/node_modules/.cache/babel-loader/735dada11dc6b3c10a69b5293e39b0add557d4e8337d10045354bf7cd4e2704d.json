{"ast":null,"code":"var _jsxFileName = \"/Users/aryan/Documents/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { ethers } from \"ethers\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  useEffect(() => {\n    const connectWallet = async () => {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        const ethersProvider = new ethers.BrowserProvider(provider); // v6 uses BrowserProvider\n        const signer = await ethersProvider.getSigner();\n        const address = await signer.getAddress();\n        setWalletAddress(address);\n        console.log(\"Connected:\", address);\n      } else {\n        alert(\"Please install MetaMask or Trust Wallet extension!\");\n      }\n    };\n    connectWallet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"USDT Approval DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected Wallet: \", walletAddress || \"Not connected\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HFxa1QVQVyclsfvcg8aUeqgFss0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ethers","detectEthereumProvider","useEffect","useState","jsxDEV","_jsxDEV","App","_s","walletAddress","setWalletAddress","connectWallet","provider","request","method","ethersProvider","BrowserProvider","signer","getSigner","address","getAddress","console","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aryan/Documents/frontend/src/App.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n\n  useEffect(() => {\n    const connectWallet = async () => {\n      const provider = await detectEthereumProvider();\n\n      if (provider) {\n        await provider.request({ method: \"eth_requestAccounts\" });\n        const ethersProvider = new ethers.BrowserProvider(provider); // v6 uses BrowserProvider\n        const signer = await ethersProvider.getSigner();\n        const address = await signer.getAddress();\n        setWalletAddress(address);\n        console.log(\"Connected:\", address);\n      } else {\n        alert(\"Please install MetaMask or Trust Wallet extension!\");\n      }\n    };\n\n    connectWallet();\n  }, []);\n\n  return (\n    <div>\n      <h1>USDT Approval DApp</h1>\n      <p>Connected Wallet: {walletAddress || \"Not connected\"}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,sBAAsB,MAAM,2BAA2B;AAC9D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,QAAQ,GAAG,MAAMV,sBAAsB,CAAC,CAAC;MAE/C,IAAIU,QAAQ,EAAE;QACZ,MAAMA,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QACzD,MAAMC,cAAc,GAAG,IAAId,MAAM,CAACe,eAAe,CAACJ,QAAQ,CAAC,CAAC,CAAC;QAC7D,MAAMK,MAAM,GAAG,MAAMF,cAAc,CAACG,SAAS,CAAC,CAAC;QAC/C,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;QACzCV,gBAAgB,CAACS,OAAO,CAAC;QACzBE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,OAAO,CAAC;MACpC,CAAC,MAAM;QACLI,KAAK,CAAC,oDAAoD,CAAC;MAC7D;IACF,CAAC;IAEDZ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BtB,OAAA;MAAAkB,QAAA,GAAG,oBAAkB,EAACf,aAAa,IAAI,eAAe;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV;AAACpB,EAAA,CA5BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}